/**
 * LTLParser is a JavaCC file to implement a parser for the LTL language
 * used for specifying properties about workflow logs of processes used in the
 * ProM framework.
 *
 * version	:   0.3
 * date		:   15112004
 * author	:   HT de Beer
 */

options {
    MULTI=true;
    STATIC=false;
}

PARSER_BEGIN(LTLParser)

package org.processmining.analysis.ltlchecker.parser;

import java.io.*;
import java.util.*;
import java.text.*;

/**
 * LTLParser is an parser for the LTL-language used in a LTL checking plugin
 * for the ProM framework.
 *
 * @version 0.3
 * @author HT de Beer
 */
public class LTLParser {
    
/* Fields */

    /** attributes contains the by this parser recognized defined
     * attributes.
     */
    ArrayList attributes;
    
    /** renamings contains the by this parser recognized defined renamings of
     * already defined attributes.
     */
    ArrayList renamings;

    /** formulae contains the by this parser recognized defined formulae.
     */
    TreeMap formulae;

    /** Parameterized formula saves their parameter data.
    */
    TreeMap parameters;

/* Methods */

    public static void main( String[] args ) {
	if (args.length != 1) {
	    System.out.println("parseltl has one argument: the name"
		+ " of the file to parse.");
	} else {
	    parseFile( args[0] );
	};
    }

    public static void parseFile( String filename ) {
    
	try {
	    LTLParser lp = new LTLParser(
		new FileInputStream(filename));
	    lp.init();
	
	    lp.parse();
	} catch( ParseException pe ) {
	    System.out.println(
		"Error occured during parsing:\n\n\t" +
		pe.getMessage() );
	} catch( IOException e ) {
	    System.out.println(
	    "Error while reading " + filename + ". Check"
	    + " the file(name) and try again.");
	} catch( Exception e ) {
	    System.out.println("Unknown error: " + e.getMessage());
//	    e.printStackTrace();
	};
    }
    
    /** Construct a new LTLParser with new empty sets, before parsing, no
     * attributes, renamings or formulae are defined.
     */
    public void init() {
	attributes  = new ArrayList();
	renamings   = new ArrayList();
	formulae    = new TreeMap();
	parameters  = new TreeMap();
    }

    /** 
     * Does id exists as attribute, renaming or formula? 
     * 
     * @param id The string denoting the identifier to check.
     *
     * @return True if id exists, else false.
     */
    public boolean existsId( String id ) {
	return (
	    existsAttribute( id ) ||
	    existsRenaming( id ) ||
	    existsFormula( id )
	    );
    }
    
    /** 
     * Does id exists as attribute or a renaming? 
     * 
     * @param id The string denoting the identifier to check.
     *
     * @return True if id exists, else false.
     */
    public boolean existsAttribute( String id ) {
	boolean exists = false;
	Iterator i = attributes.iterator();
	Attribute attr;

	while ( i.hasNext() && (! exists )) {
	    attr = (Attribute) i.next();
	    if ( attr.getValue().equals( id ) ) {
		exists = true;
	    };
	};
	
	return ( exists || existsRenaming( id ) );
    }
    
    /** 
     * Does id exists as a renaming? 
     * 
     * @param id The string denoting the identifier to check.
     *
     * @return True if id exists, else false.
     */
    public boolean existsRenaming( String id ) {
	boolean exists = false;
	Iterator i = renamings.iterator();
	Attribute attr;

	while ( i.hasNext() && (! exists )) {
	    attr = (Attribute) i.next();
	    if ( attr.getValue().equals( id ) ) {
		exists = true;
	    };
	};
	
	return ( exists );
    }
    
    /** 
     * Does id exists as formula? 
     * 
     * @param id The string denoting the identifier to check.
     *
     * @return True if id exists, else false.
     */
    public boolean existsFormula( String id ) {
	return formulae.containsKey( id );
    }

    /**
     * Get the list with attributes.
     *
     * @param The list with attributes.
     */
    public ArrayList getAttributes() {
	return this.attributes;
    }
    
    /** 
     * Get the attribute linked with id. 
     * 
     * @param id The string denoting the identifier to finf the attribute of.
     * THis id is already checked to be an attributeId.
     *
     * @return The attribute of id.
     */
    public Attribute getAttribute( String id ) {
	Iterator i;
	if ( existsRenaming( id ) ) {
	    i = renamings.iterator();
	} else {
	    i = attributes.iterator();
	};
	
	boolean exists = false;
	Attribute attr = null; 
	// Is possible because there must be an attribue with name equals id,
	// that is the contract of this method.

	while ( i.hasNext() && (! exists )) {
	    attr = (Attribute) i.next();
	    if ( attr.getValue().equals( id ) ) {
		exists = true;
	    };
	};
	
	return attr;
    }

    /** Get the formula linked with id.
     * 
     * @param id The id to get the formula for. Id is already checked to
     * contain an formula.
     *
     * @return The formula of id.
     */
    public SimpleNode getFormula( String id ) {
	return (SimpleNode) formulae.get( id );
    }

    /** Get the parameters linked with id.
     * 
     * @param id The id to get the parameters for. Id is already checked to
     * contain a formula, and hencefort a parameterlist, which may be empty.
     *
     * @return The parameterlist of id.
     */
    public ArrayList getParameters( String id ) {
	return (ArrayList) parameters.get( id );
    }
    
    private ParseException parseError( Token t, String message ) {
    // Create a new parse exception by token t with message.
	return	new ParseException("Parse error at '" + t.image + "' ( " + t.beginLine +
		", " + t.beginColumn + " ) : " + message);
    }
   
    /**
     * Get the names of the visible formulae, that is of all formula.
     *
     * @return A array of names of te defined formulae.
     */
    public ArrayList getVisibleFormulaNames( ) {
	ArrayList results = new ArrayList();
	Iterator i = formulae.values().iterator();
	SimpleNode formula;

	while (i.hasNext()) {
	    formula = (SimpleNode) i.next();
	    if ( formula.getType() == SimpleNode.FORMULA ) {
		results.add( formula.getName( ) );
	    };
	};

	return results;
    }
    
    static private String cutQuotes( Token t ) {
	String s = t.image; 
	return s.substring( 1, s.length() - 1);
    }	

    private Attribute newAttribute( String value, int kind, Attribute attr) {
	Attribute attribute = null;
	
	switch ( attr.getType() ) {
	    
	    case Attribute.NUMBER : 
		attribute = new NumberAttribute( value, kind, attr ); break;
	    
	    case Attribute.DATE : 
		attribute = new DateAttribute( value, kind, attr ); break;
	    
	    case Attribute.STRING : 
		attribute = new StringAttribute( value, kind, attr ); break;
	    
	    case Attribute.SET : 
		attribute = new SetAttribute( value, kind, attr ); break;
	
	};
	
	return attribute;
    }
}

PARSER_END(LTLParser)

/** 
 * Standard form of white space: spaces, interlines (on the unix, the dos and
 * the mac way).
 */
SKIP :
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

/** 
 * Comments are `the unix way' whit a #. These comments are one line only, but
 * it should be enough.
 */
MORE :
{
    "#" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <SINGLE_LINE_COMMENT : "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
    < ~[] >
}

/**
 * Keywords used in the language. 
 */
TOKEN :
{
    < KAS	    : "as"	    >
|   < KATE	    : "ate"	    >    
|   < KDATE	    : "date"	    >
|   < KEXISTS	    : "exists"	    >
|   < KFORALL	    : "forall"	    >
|   < KFORMULA	    : "formula"	    >
|   < KIN	    : "in"	    >
|   < KNUMBER	    : "number"	    >
|   < KPI	    : "pi"	    >
|   < KRENAME	    : "rename"	    >
|   < KSET	    : "set"	    >
|   < KSTRING	    : "string"	    >
|   < KSUBFORMULA   : "subformula"  >
}

/**
 * Literals, that is integers, reals and strings. Later on, the numbers are
 * translated to floats, so internally all numbers are comparable.
 */
TOKEN :
{
    < INTEGER_LITERAL	: ["1"-"9"](["0"-"9"])* >
|   < REAL_LITERAL	: 
	(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
    |	(["0"-"9"])+ (<EXPONENT>)? 
    >
|   < #EXPONENT		: ["e","E"](["+","-"])?(["0"-"9"])+ >
|   < STRING_LITERAL	:
	"\""
	(
	    (~["\"", "\\", "\n", "\r"])
	|   ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\""]))
	)*
	"\""
    >
|   < DESC_LITERAL	:
	"{"
	(
	    (~["}","{"])
	|   ("\\"(["n", "t", "b", "r", "f", "\\", "'", "\"", "{", "}"]))
	)*
	"}"
    >
}

/** 
 * Identifiers, either for defining attributes as well for defining formula
 * names of parameter name.
 */
TOKEN :
{
    < PIID	    : "pi" "." <IDENTIFIER>		>
|   < ATEID	    : "ate" "." <IDENTIFIER>		>
|   < ID	    : <IDENTIFIER>			>
|   < #IDENTIFIER   : <STARTLETTER> (<LETTER>|<DIGIT>)* >
|   < #STARTLETTER  : ["a" - "z","A" - "Z"]		>
|   < #LETTER	    : ["a" - "z","A" - "Z","-", "_"]    >
|   < #DIGIT	    : ["0" - "9"]			>
}

/** 
 * Separators used in the language for, well separating :-). 
 */
TOKEN :
{
    < LPAREN	    : "(" >
|   < RPAREN	    : ")" >
|   < LBRACE	    : "{" >
|   < RBRACE	    : "}" >
|   < LBRACKET	    : "[" >
|   < RBRACKET	    : "]" >
|   < BAR	    : "|" >
|   < SEMICOLON	    : ";" >
|   < COMMA	    : "," >
|   < DOT	    : "." >
|   < COLON	    : ":" >
}

/** 
 * Operators, propositional ones as well as LTL ones and comparing operators.
 * For expressing numeral expressions, some are added too, like +, -, ...
 */
TOKEN :
{
    < ASSIGN	    : ":="  >
|   < GT	    : ">"   >
|   < LT	    : "<"   >
|   < PNOT	    : "!"   >
|   < SLASH	    : "/"   >
|   < PLUS	    : "+"   >
|   < MINUS	    : "-"   >
|   < STAR	    : "*"   >
|   < EQ	    : "=="  >
|   < LE	    : "<="  >	
|   < GE	    : ">="  >
|   < NE	    : "!="  >
|   < REQ	    : "~="  >
|   < POR	    : "\\/" >
|   < PAND	    : "/\\" >
|   < PIMPLIES	    : "->"  >
|   < PBIIMPLIES    : "<->" >
|   < LALWAYS	    : "[]"  >
|   < LEVENTUALLY   : "<>"  >
|   < LNEXTTIME	    : "_O"  >
|   < LUNTIL	    : "_U"  >
}

/** 
 * The grammar of the LTL language is defined below as production rules
 * decorated with some context checking in java.
 */

void parse() :
{}
{
    (
	attributeDefinition()
    |	renaming()
    |	formulaDefinition()
    )*
    <EOF>
}

void attributeDefinition() :
{
    Attribute	attribute;
    Token	idToken;
    Token	datePatternToken;
    int		type = -1;
    int		scope = -1;
    String	name = "";
}
{
(
    // A simple type, that is, without any extra information like the date
    // type has.
    (
	"number"    { type = Attribute.NUMBER; }
    |	"set"	    { type = Attribute.SET; }
    |	"string"    { type = Attribute.STRING; }
    )
    (	
	LOOKAHEAD(2)
	idToken = <PIID>	{ scope = Attribute.PI; }
    |	idToken = <ATEID>	{ scope = Attribute.ATE; }
    )    
    {	name = idToken.image; }
    ";"
    {	
	if (! existsId( name )) {

	    // Add a specialized attribute to the list of attributes.
	    switch ( type ) {
		case Attribute.NUMBER: {
		    attribute = new NumberAttribute( name, scope, type, Attribute.ATTRIBUTE ); 
		    attributes.add( attribute );
		}; break;
		case Attribute.SET: {
		    attribute = new SetAttribute( name, scope, type, Attribute.ATTRIBUTE ); 
		    attributes.add( attribute );
		}; break;
		case Attribute.STRING: {
		    attribute = new StringAttribute( name, scope, type, Attribute.ATTRIBUTE ); 
		    attributes.add( attribute );
		}; break;
	    };
	    
	    
        } else {
	    throw parseError( idToken, " Identifier is already defined.");
	};
    }
|   // The date type, which has a slightly different definition schema, it
    // contains a datepattern to parse dateliterals.
    "date"  { type = Attribute.DATE; }
    (	
	LOOKAHEAD(2)
	idToken = <PIID>	{ scope = Attribute.PI; }
    |	idToken = <ATEID>	{ scope = Attribute.ATE; }
    )    
    {	name = idToken.image; }
    ":=" 
    datePatternToken = <STRING_LITERAL>
    ";"
    {	
	if (! existsId( name )) {
	
	    attribute = new DateAttribute( name, scope, type, Attribute.ATTRIBUTE ); 
	    attribute.setDateParser( 
		    new SimpleDateFormat( cutQuotes( datePatternToken ) ) );
	    attributes.add( attribute );
	    
        } else {
	    throw parseError( idToken, " Identifier is already defined.");
	};
    }
)
}

void renaming() :
{
    Token newIdToken, oldIdToken;
    String newName, oldName;
    int scope = -1;
    int type = -1;
}
{
    "rename"
    (
	LOOKAHEAD(2)
	oldIdToken = <PIID>  { oldName = oldIdToken.image; }
    |	oldIdToken = <ATEID> { oldName = oldIdToken.image; }
    )
    "as"
    newIdToken = <ID>    { newName = newIdToken.image; }
    ";"
    {
	if ( existsAttribute( oldName ) ) {
	    // The attribute is already defined, so it can be renamed
	    
	    if ( ! existsId( newName ) ) {
		// The new does not already exists, so it is a good name.
		
		Attribute renaming = newAttribute( newName,
			Attribute.ATTRIBUTE, getAttribute( oldName ) );
		renamings.add( renaming );
		
	    } else {
		// The id already exists, so renaming is not possible.
		
		throw parseError( newIdToken, " Identifier is already defined.");
	    };
	    
	} else {
	    // The attribute is not (already) defined, so it can not be
	    // renamed.
	    
	   throw parseError( oldIdToken, " Identifier is not a defined"
			    + "attribute.");
	};
    }
}

SimpleNode formulaDefinition() :

{
    Token formulaToken;
    ArrayList params = new ArrayList();
    Token descriptionToken;
}
{
    (   
	"formula"	    {	jjtThis.setType( SimpleNode.FORMULA ); }
    |	"subformula"	    {	jjtThis.setType( SimpleNode.SUBFORMULA ); }
    )
    formulaToken = <ID>
    "("
    [ params = argList() ]
    {
	parameters.put( formulaToken.image, params.clone() );
    }
    ")"
    ":="
    descriptionToken = <DESC_LITERAL>
    { jjtThis.setDescription( cutQuotes( descriptionToken ) ); }
    // The name of the formula is needed to enforce that recursion is not
    // possible.
    props( params, formulaToken.image )
    ";"
    {
	if ( ! existsId( formulaToken.image )) {
	
	    jjtThis.setName( formulaToken ); 
	    formulae.put( formulaToken.image, jjtThis );
	} else {
	    // The name already exists, so give an error
	    throw parseError( formulaToken, " Identifier is already defined." );
	};
	return jjtThis;
    }
}

ArrayList argList( ) :
{
    Attribute argument;
    ArrayList localVars = new ArrayList();
}
{   
    argument = arg( localVars ) { localVars.add( argument ); }
    (
	"," 
	argument = arg( localVars ) { localVars.add( argument ); } 
    )*
    { return localVars; }
}

Attribute arg( ArrayList localVars ) :
{
    Token attributeToken;
    Token paramToken;
    Iterator i = localVars.iterator();
    boolean alreadyInLocalVars = false;
    Attribute argument;
}
{   
    paramToken = <ID> 
    {
	while ( i.hasNext() && ! alreadyInLocalVars) {
	    // Is paramToken already in the local variables?
	    
	    argument = (Attribute) i.next();
	    if ( argument.getValue().equals( paramToken.image ) ) {
		alreadyInLocalVars = true;
	    };
	};
	
        if ( existsId( paramToken.image ) || alreadyInLocalVars ) {
	    // Id already exists in the context or on global scale.
	    
	   throw parseError( paramToken, " Identifier is already defined or used.");
        };
    }
    ":"
    (
        attributeToken = <ID>
    |   attributeToken = <PIID>
    |   attributeToken = <ATEID>
    )
    {
        if (!  existsAttribute( attributeToken.image ) ) {
	
	    throw parseError( attributeToken,  " Identifier is not a defined"
				+ " attribute or a renaming.");	    
        };
	    
	// The argument is correct

	return newAttribute( paramToken.image, Attribute.ATTRIBUTE, 
			getAttribute( attributeToken.image ) );
    }
}   

SimpleNode props( ArrayList localVars, String formulaName ) #Proposition :
{
}
{
    (
	unaryProp( localVars, formulaName )
    |   binaryProp( localVars, formulaName )
    |   quantification( localVars, formulaName )
    |   LOOKAHEAD(2)
        comparison( localVars )
    |   LOOKAHEAD(2)
        formulaCall( localVars, formulaName )
    )
    {
	jjtThis.setType(SimpleNode.PROPOSITION);
	return jjtThis;
    }
}

SimpleNode unaryProp( ArrayList localVars, String formulaName ) #UnaryProposition :
{
}
{
    (
	"!"	{ jjtThis.setType( SimpleNode.NOT );	    }
    |	"[]"	{ jjtThis.setType( SimpleNode.ALWAYS );	    }
    |	"<>"	{ jjtThis.setType( SimpleNode.EVENTUALLY ); }
    |	"_O"	{ jjtThis.setType( SimpleNode.NEXTTIME );   }
    )
    "(" props( localVars, formulaName ) ")"
    { return jjtThis; }
}

SimpleNode binaryProp( ArrayList localVars, String formulaName ) #BinaryProposition :
{
}
{
    "(" props( localVars, formulaName )
    (
	"/\\"	{ jjtThis.setType( SimpleNode.AND );	    }
    |	"\\/"	{ jjtThis.setType( SimpleNode.OR );	    }
    |	"->"	{ jjtThis.setType( SimpleNode.IMPLIES );    }
    |	"<->"	{ jjtThis.setType( SimpleNode.BIIMPLIES );  }
    |	"_U"	{ jjtThis.setType( SimpleNode.UNTIL );	    }
    )
    props( localVars, formulaName ) ")"
    { return jjtThis; }
}

SimpleNode quantification( ArrayList localVars, String formulaName ) #Quantification :
{
    Attribute dummy;
}
{
    (
	"forall"    { jjtThis.setType( SimpleNode.FORALL ); }
    |	"exists"    { jjtThis.setType( SimpleNode.EXISTS ); }
    )
    "[" 
    dummy =  dummy( localVars ) 
    { 
	localVars.add( dummy ); 
	jjtThis.setDummy( dummy );	
    }    
    "|" props( localVars, formulaName ) "]"
    { return jjtThis; }
}

Attribute dummy( ArrayList localVars ) #DummyVar:
{
    Token attributeToken;
    Token idToken;
    Attribute dum;
    boolean existsAsLocalVar = false;
    Iterator i = localVars.iterator();
}
{
    idToken = <ID>
    {
	while ( i.hasNext() ) {
	    // Check if there is a local variable with name == id
	    
	    dum = (Attribute) i.next();
	    if ( dum.getValue().equals( idToken.image ) ) {
		existsAsLocalVar = true;
	    };
	};
	if ( existsId( idToken.image ) || existsAsLocalVar ) {
	    // Id exists as global definition or as local var
	    
	    throw parseError( idToken,  " Identifier is already in use in the local" +
		    " context.");
	};
    }
    ":"
    (
	attributeToken = <ID>
    |	attributeToken = <PIID>
    |	attributeToken = <ATEID>
    )
    {
	if ( ! existsAttribute( attributeToken.image ) ) {
	    throw parseError( attributeToken, " Identifier is not a defined"
				+ " attribute or a renaming.");
	} else if ( 
		! (getAttribute( attributeToken.image ).getType() == Attribute.SET)
		) {
		
		    // error, quantification must over sets
		throw parseError( attributeToken, " Identifier is not a set." );
		
	};
	    
	// Attribute exists and is of tye set:
	    
	return newAttribute( idToken.image, Attribute.ATTRIBUTE, 
				    getAttribute( attributeToken.image ) );	
    }
}

SimpleNode comparison( ArrayList localVars ) #Comparison :
{
    Attribute attribute;
    Token tok;
    int type;
    TreeSet strings = new TreeSet();
}
{
    attribute = attributeId( localVars )
    { 
	type = attribute.getType(); 
	jjtThis.setAttribute( attribute );	
    }
    (
	(
		"=="	{ jjtThis.setType( SimpleNode.EQUAL );		}
	|	"!="	{ jjtThis.setType( SimpleNode.NOTEQUAL );	}
	|	"<="	{ jjtThis.setType( SimpleNode.LESSOREQUAL );	}
	|	">="	{ jjtThis.setType( SimpleNode.BIGGEROREQUAL );  }
	|	"<"	{ jjtThis.setType( SimpleNode.LESSER );		}
	|	">"	{ jjtThis.setType( SimpleNode.BIGGER );		}
	|	tok = "~="	
		{ 
		    if ( type != Attribute.STRING) {
			// this operator does not exists then
			throw parseError( tok,
			    " Identifier is not a string."
			);
		    } else {
			jjtThis.setType( SimpleNode.REGEXPEQUAL );	
		    };
		}
	)
	expr( type, localVars, attribute )
    | tok = "in"	
		{		    
		    if ( type != Attribute.SET) {
			// this operator does not exists then
			throw parseError( tok,
			    " Identifier is not a set."
			);
		    } else {
			jjtThis.setType( SimpleNode.IN );
		    };
		}

	"[" 
	[strings = stringList()]
	{ jjtThis.setStrings( strings ); }
	"]"
    )
    { return jjtThis; }
}

SimpleNode formulaCall( ArrayList localVars, String formulaName ) #FormulaCall :
{
    Token formulaToken;
    ArrayList values = new ArrayList();
}
{
    formulaToken = <ID>
    {
	if (! existsFormula( formulaToken.image ) ) {
	    throw parseError( formulaToken, " Identifier is not a defined formula.");
	} else if ( formulaName.equals( formulaToken.image ) ) {
	    // Recursion is forbidden, so if the name of this call is to the
	    // function in which is call is placed, it is wrong.
	    throw parseError( formulaToken, " Recursion of formulae is not" +
				" allowed. If you want to apply" +
				" staterecursion, use [] and _O." +
				" ( See the manual for more details.)");
	} else {
	    jjtThis.setName( formulaToken.image );
	};
    }
    "(" 
    [ values = valList( formulaToken.image, localVars ) ]
    ")"
    {
    	jjtThis.setType( SimpleNode.USEFORMULA );
	if ( 
	    values.size() != 
	    ((ArrayList) parameters.get( formulaToken.image )).size()
	    ) {
		throw parseError( formulaToken, " Defined number of" 

		+ " parameters not equal to the number of arguments" 
		+ " applied here.");
	};
	jjtThis.setValues( values );
	return jjtThis;
    }
}

ArrayList valList( String formula, ArrayList localVars) #Values :
{
    ArrayList paramsOfFormula = (ArrayList) parameters.get( formula );
    int paramOrder = 0;    
    Attribute param;
    Attribute value;
    ArrayList values = new ArrayList();
}
{    
    { 
	if ( !( paramsOfFormula.size() <= 0 ) ) {
	    param = (Attribute) paramsOfFormula.get( paramOrder ); 
	} else {
	    param = null;
	};
    }
	    
    ( 
	value = valId( param, localVars )
    |	value = literal( param )
    ) 
    { 
	paramOrder++; 
	values.add( value ); 
    }
    (
	{ param = (Attribute) paramsOfFormula.get( paramOrder ); }
	","
	(
	    value = valId( param, localVars )
	|   value = literal( param )
	) 
	{ 
	    paramOrder++; 
	    values.add( value );
	}
    )*
    {
	return values;
    }
}

TreeSet stringList() #StringList :
{
    TreeSet strings = new TreeSet();
    Token st;
    String s;
}
{   
    st = <STRING_LITERAL> 
    { strings.add( cutQuotes( st ) ); }
    (
	"," 
	st = <STRING_LITERAL>
	{ strings.add( cutQuotes( st ) ); }
    )*
    {
	return strings;
    }
}

Attribute attributeId( ArrayList localVars ) #Attribute :
{
    Token id;
    Attribute result;
}
{
    (
    id = <ID>
|   id = <PIID>
|   id = <ATEID>)
    { 
	Iterator i = localVars.iterator();
	boolean found = false;
	Attribute attr = null;

	while ( i.hasNext() && (! found )) {
	    attr = (Attribute) i.next();
	    if ( attr.getValue().equals( id.image ) ) {
		found = true;
	    };
	};
	
	if ( (! existsAttribute( id.image )) && (! found )) {
	    throw parseError( id, " Identifier is not a defined attribute.");
	};
	if ( found ) {
	    result = attr;
	} else {
	    result = getAttribute( id.image );
	};
	
	return result;
    }
}

Attribute valId( Attribute param, ArrayList localVars) 
	#ValueAttribute :
{
    Token id;
    Attribute val = null;
    Iterator i = localVars.iterator();
    boolean found = false;    
}
{
    (
    id = <ID>
|   id = <PIID>
|   id = <ATEID>)
    { 
	while ( ( i.hasNext() ) && ( ! found ) ) {
	    val = (Attribute) i.next();
	    if ( val.getValue().equals( id.image ) ) {
		found = true;
	    };
	};
	if ( found && ( ! localVars.isEmpty()) ) {
	    if ( ! ( val.getType() == param.getType() ) ) {
		throw parseError( id,
		    " Identifier has not the right type.");
	    }
	} else if (! existsAttribute( id.image ) ) {
	    throw parseError( id, " Identifier is not a local parameter in this context.");
	} else {
	    // It is a `global' par
	    val = getAttribute( id.image ) ;
	};

	return val;
    }
}

Attribute literal( Attribute param ) #Literal : 
{
    Token tok;
    Attribute result = null;
    String attribute = param.getAttributeId();
    int type = getAttribute( attribute ).getType();
    SimpleDateFormat sdf = new SimpleDateFormat();
    Date date;
}
{
    (
	tok = <STRING_LITERAL>
	{
	    if ( type == Attribute.STRING ) {
		result = (StringAttribute) newAttribute( 
		    cutQuotes( tok ),
		    Attribute.LITERAL,
		    param);
	    } else if ( type == Attribute.DATE ) {
		try {
		    // check if date literal can be parsed as specified
		    sdf =  param.getDateParser();
		    date = sdf.parse( cutQuotes( tok ) );
		    result = (DateAttribute) newAttribute(
			cutQuotes( tok ),
			Attribute.LITERAL,
			param);
		
		} catch( Exception pe ) {
		    throw parseError( tok, " Unable to parse this as a date" +
			" given definition '" + sdf.toPattern() + 
			"'."
			);
		};
	    } else if ( type == Attribute.SET ) {
		result = (SetAttribute) newAttribute(
		    cutQuotes( tok ),
		    Attribute.LITERAL,
		    param);
	    } else {
		throw parseError( tok, " Type mismatch.");
	    };
	}
    |	tok = <INTEGER_LITERAL>
	{
	    if ( ! ( type == Attribute.NUMBER ) ) {
		throw parseError( tok, "Not expexted a integer" );
	    };
	    result = (NumberAttribute) newAttribute(
		tok.image,
		Attribute.LITERAL,
		param);
	}
    |	tok = <REAL_LITERAL>
	{
	    if ( ! ( type == Attribute.NUMBER ) ) {
		throw parseError( tok,  "Not expexted a floating point number." );
	    }
	    result = (NumberAttribute) newAttribute(
		tok.image,
		Attribute.LITERAL,
		param);
	}
    )
    {
	return result;
    }
}


SimpleNode expr(int type, ArrayList localVars, Attribute lefthandSideAttribute ) #Expr :
{
    Token t;
    Attribute param = null;
    Attribute value;
    Iterator i = localVars.iterator();
    boolean paramExists = false;
    SimpleDateFormat sdf = new SimpleDateFormat();
    Date date;
}
{   
    // `Numeral' expression
    (
	// - Number
	t = "-" { jjtThis.setType( SimpleNode.UNMINUS ); }
	expr(type, localVars, lefthandSideAttribute )
    |	// ( Number op Number )
	t = "(" 
	expr(type, localVars, lefthandSideAttribute )  
	( 
	    "+" { jjtThis.setType( SimpleNode.PLUS ); }
	|   "-" { jjtThis.setType( SimpleNode.MINUS ); }
	|   "*" { jjtThis.setType( SimpleNode.MULT ); }
	|   "/" { jjtThis.setType( SimpleNode.DIV ); }
	)
	expr(type, localVars, lefthandSideAttribute ) 
	")"
    |	// INT
	t = <INTEGER_LITERAL> 
	{ 
	    jjtThis.setType( SimpleNode.INT );
	    jjtThis.setName( t.image ); 
	    jjtThis.setAttribute(
		(NumberAttribute) newAttribute(
		    t.image,
		    Attribute.LITERAL,
		    lefthandSideAttribute) );
	}
    |	// REAL
	t = <REAL_LITERAL> 
	{ 
	    jjtThis.setType( SimpleNode.REAL ); 
	    jjtThis.setName( t.image );    
	    jjtThis.setAttribute(
		(NumberAttribute) newAttribute(
		    t.image,
		    Attribute.LITERAL,
		    lefthandSideAttribute) );
		
	}
    )
    { 
	// One of the above choises implies type == number.
	if (! (type == Attribute.NUMBER)) {
	    throw parseError(  t, " Expected a numerical value.");
	};
	
    return jjtThis;
    }
|   
    // String-like expression
    t = <STRING_LITERAL>
    { 
	if ( type == Attribute.STRING ) {
	    jjtThis.setType( SimpleNode.STRING );
	    jjtThis.setName( cutQuotes( t ) );
	    jjtThis.setAttribute(
		(StringAttribute) newAttribute(
		    cutQuotes( t ),
		    Attribute.LITERAL,
		    lefthandSideAttribute) );
	} else if ( type == Attribute.DATE ) {
	    try {
		// check if date literal can be parsed as specified
		sdf = lefthandSideAttribute.getDateParser();
		date = sdf.parse( cutQuotes( t ) );
		
		jjtThis.setType( SimpleNode.DATESTRING );
		jjtThis.setName( cutQuotes( t ) );
		jjtThis.setAttribute(
		    (DateAttribute) newAttribute(
			cutQuotes( t ),
			Attribute.LITERAL,
			lefthandSideAttribute) );
		
	    } catch( Exception pe ) {
		throw parseError( t,  " Unable to parse this as a date" +
			" given definition '" + sdf.toPattern() + 
			"'." );
	    };
	} else if ( type == Attribute.SET ) {
	    jjtThis.setType( SimpleNode.SETSTRING );
	    jjtThis.setName( cutQuotes( t ) );
	    jjtThis.setAttribute(
		(SetAttribute) newAttribute(
		    cutQuotes( t ),
		    Attribute.LITERAL,
		    lefthandSideAttribute) );
	} else {
	    throw parseError(t, " Expected a string.");
	};
	
	return jjtThis;
    }
|   // An id ( of an attribute )
    ( 
	t = <ID>
    |	t = <PIID>
    |	t = <ATEID>
    )
    {
	while ( i.hasNext() && (! paramExists)) {
	    param = (Attribute) i.next();
	    if (param.getValue().equals(t.image)) {
		paramExists = true;
	    };
	};

	if ( ! existsAttribute( t.image ) ) {
	    // t is not a global attribute or renaming
	    if ( ! paramExists ) {
		// t is not a local renaming

		throw parseError( t, " Identifier is not defined.");
	    } else {
		// param exists, so param is not empty

		if ( !( param.getType() == type ) ) {
		    // Wrong types

		    throw parseError( t, " Type mismatch." );
		} else {
		    // Good types, so build this node
		    
		    jjtThis.setName( t.image );
		    jjtThis.setType( SimpleNode.ATTRIBUTE );
		    jjtThis.setAttribute( param );
		};
	    };
	} else {
	    // t is a global attribute or renaming

	    if ( ! ( getAttribute( t.image ).getType() == type ) ) {
		// Wrong types

		throw parseError( t, " Type mismatch." );
	    } else {
		// Good types
	
		jjtThis.setName( t.image );
		jjtThis.setType( SimpleNode.ATTRIBUTE );
		jjtThis.setAttribute( getAttribute( t.image ) );
	    };
	};
	
	return jjtThis;
    }
}
